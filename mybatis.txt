增强的 JDBC  操纵数据库
	三层架构 ：界面层      业务逻辑层 	 数据访问层
	
	界面层  接受用户的数据	显示处理结果	（controller 包）
	业务逻辑层   处理业务逻辑  接受 界面层传来的数据	 计算逻辑 调用数据库 获取数据（service 包）
	数据访问层	完成对数据库的 增删 改查	（Dao类）
	
	类的交互
	用户使用界面层  -->业务逻辑层 -->数据访问层 （持久层 ）-->数据库(mysql)

	三层 处理的框架
	界面层 --servlet---springmvc
	业务逻辑层 --service类 --spring
	数据访问层 --dao类 --mybatis  

2.框架
	框架 规定好了 规则  将 我写出来的代码 识别 并且 排版成功
	1) sql  mapper ：sql映射
		可以吧表中的一行数据 映射为 一个java对象，操作这个对象 就相当于操作表中的数据
	2）Data Access Objects （DAOs） ：数据访问，对数据 进行 增删改查

mybatis 提供 功能：
	1.创建 Connuection ，Statement ,Resultset的能力 不用 开发人员创建对象
	2.提供 执行sql语句的能力
	3. 提供循环 ，吧sql的结果转化为java对象 List集合的能力
	4.提供 关闭资源的能力  不用手动关闭 Connuection Statement 
	5.开发人员做的事 ：提供 sql语句

实现步骤：
1.新建student表
2.加入maven的mybatis 坐标 ，mysql驱动坐标
3.创建实体类  Student --保存表中的一行数据
	加入依赖
4.创建持久层的dao接口 ，定义操作数据库的方法
5. 创建一个mybatis的 配置文件   sql映射文件  一个表一个 sql 映射文件   文件为xml
	5.1）在接口所在的目录中，
	5.2）文件名和接口保持一致

6.创建 mybatis的主配置文件 ：
	一个项目就一个主配置文件
	主配置文件 提供 数据库的连接信息 和 sql映射文件的 位置信息
7.创建使用mbatis类
 	通过mybatis 访问数据库
 过程  ：开发人员 提供 sql语句 --mybatis 处理sql  --开发人员得到List集合 或者java对象 （表中的数据）




过程细节：
	1.加入依赖 mybatis 依赖 和 mysql驱动
	2.定义一个 接口    接口内方法 返回 要查询的 表的信息 
		2.2  写一个同名的 xml     
			2.2.1   namespace	为接口的全限定名称  相对路径 绝对路径
			2.2.2  在 mapper 中 放 数据库操作 对应的标签   
				2.2.2.1   标签中对应的 id 代表 要执行的sql语句
				2.2.2.2   resultType 表示 sql 语句执行后  获得 的数据转换成 什么类型  将同名的列 给 相对于的 类型之中的数据
	3. 主配置文件  中 type =“POOLED”  POOLED 代表连接池信息
		3.1 pooled 之中的 property  之间的属性 
			分别代表 数据库中的 类的信息 和 连接池的信息  要操作的数据库的用户名和 密码
		3.2 主配置文件之中 用
			<mappers> 	来指定一个文件的位置
				resource =“”代表指定的文件的位置 
					      从类路径的路径信息开始
			napper  一次只能指定一个 文件

	4.查询 是 sqlSession.selectList(new SqlSession); 方法
	  插入  是 sqlSession.insert(new SqlSession   , 要插入的对象);

（2）	配置日志功能
	<settings>
		<setting name ="logImpl" value ="STDOUT_LOGGING"  />
	</settings>   
	放入主配置文件即可

第二章 类的介绍：
	1）Resources ：mybatis的 一个类 负责读主配置文件
	InputStream in =Resoruces.getResourceAsStream("mybatis.xml");
	2）SqlSessionFactoryBuilder ：创建SqlSessionFactory对象：
     	 SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
	创建SqlSessionFactory对象
      	 SqlSessionFactory factory- = builder.build(in);
	3） SqlSessionFactory ：重量级对象 ，耗时长  整个项目只有一个
	SqlSessionFactory ：接口 接口实现类： DefaultSqlSessionFactory
	SqlSessionFactory 作用: 获取SqlSession 对象 SqlSession sqlSession = factory.openSession();
	openSession 方法说明：
	1. 无参 获取非自动提交事务的 SqlSession对象
	2. openSession （boolean ）：. openSession （true） 获取自动提交事务的SqlSession
				openSession （false） 非自动提交事务的SqlSession
	4）SqlSession：
	SqlSession：接口 定义了 操作数据的方法 ：例如 selectOne（）
	使用要求： SqlSession对象 不是线程安全的 需要在方法内部使用 ，在执行sql语句之前 ，使用openSession()获取 SqlSession
	执行sql后 需要关闭  执行 SqlSession。close（） 保证使用是线程安全的
