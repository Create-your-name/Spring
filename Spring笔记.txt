 Spring：解决企业开发的难度 减轻项目模块之间的管理 类与类之间的管理 
核心技术 ioc aop  实现模块.类之间的耦合度 让关系更加松散

依赖：类A中使用了类B的属性或方法 叫做 类A  依赖 类B
maven 管理jar包 管理模块管理 资源内容
spring 管理项目之中方法
--------------------------------------------------------------------------------
Spring 第一个核心功能 IOC： 控制反转  描述的是 将对象的创建，赋值，管理工作都交给代码之外的容器实现 

控制：创建对象 对象之间的属性赋值 对象之间的关系管理
反转：把原来开发人员管理，将创建对象权限转移给代码之外容器实现，由容器来管理对象，创建对象，给属性赋值
正转：开发人员在代码中用new构造对象 开发人员主动管理对象
	Student student=new Student
容器： 存放对象 根据需求在容器内获取对象

使用IOC的理由：减少对代码的改动 实现不同的功能。解耦合！！·

JAVA中创建对象的方式：
1。构造方法
2.反射
3.序列化
4.克隆
5.IOC : 容器创建对象
IOC的体现：
	serlvet 1：类继承HttpServelt
	           2：在web.xml注册servlet ，<servelet -name> myservlet <servelet -name>
				<servelt-class>com.bjpwernode.controller.Myservlet<servelt-class>
		3.没有创建Servlet对象 没有Myservlet myservlet=new MyServlet
		4.Servlet 是Tomcat 创建的  Tomcat就称为容器  里面由Servlet对象
IOC 的技术实现，
  DI 是 ioc的技术实现，  ：依赖注入，只需要在程序中提供要使用的对象的名称就可以，
Spring 使用DI实现IOC功能，
-------------------------------------------------------------------------
Spring的IOC 由spring创建对象
实现步骤：
1.创建maven项目 
2.加入maven依赖
  spring的依赖
  junit依赖
3. 创建类 （普通类）♥♥
4.创建spring需要使用的配置文件※※♥♥♥♥
  声明类的信息，这些类由spring创建和管理
5.测试spring创建的对象。

ApplicationContext 容器名=new classPathApplicationContext(文件名);  容器读取该文件 // 创建对象
当遇见 bean标签时 通过反射机制 调用类的构造方法 创建对象 bean id 就是对象id 将对象 放在map之中
一个bean 只能创建一个对象 ，在读取文件的同时 对象就已经创建好了
在创建容器时 会创建配置文件的所有对象

 Someservice service = (Someservice) ac.getBean("someService");
从容器中的Map获取 someService 对象 拿到对象 赋值给service 用service 调用方法即可    

Spring 默认调用的时无参构造方法


Spring 配置名称 在项目中 默认 ApplicationContent

DI-XML //给JAVA对象的属性赋值
DI : 依赖注入，表示创建对象 给属性赋值。
DI的实现的语法由两种：
1.在spring的配置文件中使用 标签和 属性完成
2.使用 spring中的注解 完成属性的赋值  基于注解的DI实现

DI的语法分类：
（1.)set注入（设置注入）： 用类的set 方法 完成属性赋值。
	对于<property name="name" value="" />注入set方法  即是若有对应的set方法即可 实现  value 必须是字符串类型  所有值必须放在引号中 xml规则
	1.set注入 （设置注入）：spring调用类的set方法， 你可以在set方法中完成属性赋值
         		1.1简单类型的set注入
                	<bean id="" class=""
               		 <property name="属性名字" value="属性值"/>
                	一个property 只能给一个属性赋值
                	</bean> 
		
		1.2引用类型的set注入：spring调用类的set方法
		<bean id="" class=""
               		 <property name="属性名字" ref="属性值"/>
                	一个property 只能给一个属性赋值
                	</bean> 
	2.构造注入 ，spring调用类的有参构造方法 ，创建对象 完成赋值。 
		构造注入使用<constructor-arg>标签
		<constructor -arg>标签属性：
			name:表示构造方法的形参名
			index:表示构造方法的  中形参的位置 ，参数从左往右位置是0 1 2
			value:表示构造方法的形参是简单类型 使用value
			ref：表示构造方法的形参是引用类型 使用ref
	<property> 使用方式是 调用set对象
	<property> 使用方式是 调用set对象 一种是 index 默认 形参构造方法 在xml中创建spring对象  另一种是 name=""指定名字 创建对象
		 引用类型的自动注入：spring框架根据某些规则 可以对！！！（！！！引用类型！！！！）！！！！赋值。不用手动赋值
           	             规则： byname  bytype
                	        1.byname （按名称注入）：Java类中引用类型的属性名 和spring容器中 （配置文件）（bean）的id名称一样 且数据类型一直
                                	                这样的容器中的bean ，spring能够赋值给引用类型
                        		<bean id="xx" class="yy" autowire ="byname">
                                       	简单类型属性赋值
                                       	</bean>
			即 在创建容器MAP过程中 构造类CLASS时 先进行简单类型属性赋值  
			后 编译器扫描到autowire 自动取得在类中的引用数据类型  与xml文件中bean =“id”一一对应 后注入
		2.bytype(按类型注入)： Java类中引用类型的数据类型 和spring容器中（配置文件）《bean》的class属性时同源关系的 这样bean能够赋值给引用类型
                              		同源时一类的意思：
                          ·		    1.java类中 引用数据类型和bean的 class值时一样的
                              		2.java类中 引用数据类型和bean的 class值父子类关系
                         	     3.java类中 引用数据类型和bean class 的值的接口和实现类关系的
               			         语法：
              		           <bean id="xx" class="yy" autowire ="bytype">
                	                       简单类型属性赋值
                	                       </bean>
			即 在创建容器MAP过程中 构造类CLASS时 先进行简单类型属性赋值  
			后 编译器扫描到autowire=”bytype“ 自动取得在类中的引用数据类型  
			与xml文件中bean =class的一一对应 看看是否由三个对应关系的一种 有就相互对应
--------------------------------------------------------------------------------------------------------------------------
		1. 多个配置文件的优势
		 1.1每个文件 的大小笔记小 效率高
		 1.2 避免多人竞争 带来的冲突
		项目内有多个模块 一般采用 一个模块一个配置文件
		主文件 ：包含其他配置文件  著配置文件 不定义对象 
		           语法：<import resource="classpath：其他配置文件的路径"/>
		           关键字:"classpath:"表示类的路径 （class文件所在的目录）
			在spring配置文件中要指定其他文件的路径 需要使用classpath 告诉spring去哪里加载读取文件
	                	    <import resource="classpath:id-*"/>	//表示该id下所有的id开头的xml所有文件
				注意：主的配置文件名称不能包含在通配符的范围内 要不然会进入到无限循环 
（2.）基于注解的DI  通过注解 完成java对象的创建 属性赋值
	使用注解的步骤：
	1.加入maven的依赖 spring-context ，在你加入spring-context的同时 间接加入spring-aop的依赖  使用注解必须加入spring-aop依赖
	2.在类中加入spring的注解 （多个不同功能的注解）
	3.在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你的项目中的位置
        学习的注解：
        1.@Component
        2.@Respotory
        3.@Service
        4.@Controller
        5.@value
        6.@Autowired
        7.@Resource
	通过spring的注解完成java对象的创建 配置 属性 代替xml文件
	实现步骤：
	1.加入依赖
	2。创建类 ，类中加入注解
	3.创建spring的配置文件 
	   声明组件扫描器的标签 指明注解在你项目中的位置。
	4.使用注解创建对象，创建容器ApplicationContext
      1.@Component (value="对象名")
		在想要创建的类的 头上加上注解 然后 
		在xml中 加入<context:component-scan base-package="包名"/> //组件扫描器  然后扫描器就扫描到此行 即创建了对象
           		使用value属性 ，指定对象的名称     
		也可以Component（“对象名”）

		不指定对象名称 由spring提供默认名称   直接@Conponent  spring会创建一个默认对象  默认的对象名称为类名的首字母小写
	          spring中和@Component功能一致，创建对象的注解还有：
	          1.@Repository(用在持久层类上面)：放在dao的实现类上面 
		表示创建dao对象，dao对象能够直接访问数据库
	          2.@Service(放在业务层类的上面)：放在service的实现类上面
		创建service对象 ，service对象是做业务处理 可以有事务等功能的。 
	          3.@Controller(用在控制器上面 )：放在控制器（处理器）类的上面，创建控制器对象的
		控制器对象 能够接受用户提交的参数 显示请求的处理结果.
	            以上三个注解的使用语法和@Component一样的 都能够创建对象，但是这三个注解还有额外的功能。
      1.@Value (value="对象名")
		在想要创建的类的  所想要   赋值的变量的 头上加上注解 然后 
           		使用value属性 ，指定对象的名称     
		也可以Value（“对象名”）
		也可以在set方法上面放@Value
引用类型
     3.@Autowired：spring框架提供的注解 实现引用类型的赋值
	spring中通过注解给引用类型赋值，使用的是自动注入原理 支持byName ，byType	
	一样是 在spring xml中 寻找 引用类型的 byname 或者 byType方法 执行
	@Autowired：默认使用的是 byType自动注入

 	属性：required 是一个boolean类型的，默认 为true
   	  required=true ：表示引用类型赋值失败 ，程序报错，并且终止执行。
   	   required=false:如果找到了Autowired的时候  就代表找到了 引用类型的对象 并且赋值 成功
    	   required=true  更好 会提前把程序中的错误报出来  检测是不是正确的   有利于快速找到问题所在
  	位置：1。在属性定义的上面，无需set方法，推荐使用
  	     2.在set方法上面
	一样在xml下创建bean对象    原类型@Conponnet
@Resource：来自jdk的注解，spring框架提供了对这个注解的功能支持，！！！！！！！！！！！！！！可以使用它给引用类型赋值！！！！！！！！！！！！！！
   	        使用的也是自动注入原理 支持byName byType 默认的是byName
 	位置：1， 在属性定义的上面 无需set方法，推荐使用
   	    2，在set方法的上面
 	默认是byName 如果使用byName自动赋值失败  再使用byType
 	只需用byName的方式  需要增加一个属性name
 	name的值是bean的id（名称）

 	-------------------------------
	 使用byName方式
 	1.在属性上面加入@Autowired
	 2.在属性上面加入@Qualifier(Value="对象的名字。。。bean的id")：表示使用指定名称的bean完成赋值

	对于 用配置文件 还是 注解 就是：经常改 用配置文件  不经常改 就用 注解
	
	@Value（"${给需要赋值的属性 的 xml文件中的  ID}"） 可以达到 解耦合的 作业
-------------------------------！！！注解的使用步骤！！！！！！！！！！！！-------------------
 自动注入：spring根据规则 给引用类型完成赋值，常用的有byName byType
byName ：按照名称注入 Java类中英语类型的属性名和spring容器中的bean   [id]一样 数据类型一样 就会自动注入
byType：按照类型注入  java类中 的引用类型的数 数据类型和spring容器中bean的class 是同源关系的
1.加入依赖：spring-context
2.在类中加入注解
3.在spring的配置文件中，加入组件扫描器的标签<context:component-scan base-package="包名">

----------------------------------------------ioc能实现解耦合 
ioc能够实现业务对象之间的解耦合，service 和dao对象之间的解耦合
-----------------------------------	!	!	!	AOP(面向切面编程)
可以实现动态代理
作用：创建对象  在原有代码不改动的情况下 增加功能

动态代理： 在程序的执行过程中，创建代理对象。
通过代理对象执行方法，给目标类的方法增加额外的功能（功能增强）
实现业务方法 和 非业务方法的分离 解耦合
实现步骤：
1.创建目标类 someservic 目标类  给需要多出的事务 增加输出时间。
2.创建InvacotionHandler接口的实现类，在这个实现类实现给目标方法增加功能。
通过代理对象执行方法 调用执行invoke（）
执行目标类的方法 通过method类实现
object res =method.invoke（target，args）；
3.使用jdk中 类 proxy 创建代理对象 实现创建对象的功能 

AOP的底层实现使动态代理
1.动态代理 
   实现方式：jdk动态代理 使用jdk中的Proxy,Method,invocationHanderl创建代理对象
	  jdk动态代理要求目标类必须实现接口
   cglib动态代理 ：第三方的工具库，创建代理对象，原理是继承，通过继承目标类，创建子类
    作用：
1）在目标类源代码不变的情况下 增加功能
2）减少代码的重复
3）专注业务逻辑代码
4）解耦合  让业务功能 和非业务功能分离

3.AOP 面向切面编程 给予动态代理 用jdk和 cglib代理方式  AOP就是JAVA动态代理规范化 
	将动态代理用统一的方式   动态代理 标准化
 （Aspenct  Orient  Programming）面向切面编程
Aspenct：切面 ，给你的目标类增加的功能 就叫切面	切面的特点：一般都是非业务方法，独立使用。和业务功能没关系
Orient : 面向 
Programming  ：编程
类似于 OOP(面向对象编程) :将对象 分析出来 有哪些功能 功能 由哪些对象  对象由类  考虑类的属性类的方法
AOP (目标点 为切面)： 有哪些功能可以当做切面来使用
1)  分析功能时 找出切面 ，2） 安排时间 来处理切面的时间  3） 合理的安排切面的执行位置

AOP作用：
1.不修改源代码 情况下增加功能
2.减少重复代码
3.专注业务功能的实现
4.解耦合

术语：
Aspect： 切面 表示 增强的功能   非业务功能。 常见的 切面功能：日志 事务  统计信息 ，参数检查 ，权限验证。
JoinPoint： 连接点， 连接业务方法 和切面的位置。就是 某个类中的业务方法
Pointcut： 切入点，指多个连接点方法的结合。多个方法
目标对象：给哪个类的方法增加功能  这个类就是目标对象
Advice：通知 ，通知表示切面的 功能执行时间。

一个切面 有三个要素
1）切面的功能代码  ，切面 用来干什么
2）切面执行的位置，使用Pointcut表示切面执行的位置    这个切面上的点的切入 JoninPonint 一个点 Ponintcut 点的集合
3）切面执行的时间，使用Adivece 表示 时间 是在方法执行前 还是方法执行后
面试过程 常问：动态代理的实现方法 ，动态代理的作用  怎么理解面向切面编程

!!!!!------------------------!!!! AOP的实现 !!! --------------------------------------!!!
AOP的技术实现 框架：
1.spring ：在内部实现了aop规范 ，能做aop的工作
	spring主要在 事务处理 使用aop

2. aspectJ：一个开源的 专门做AOP的框架  spring框架中 集成了 aspectj 框架 通过spring来实现 aspectJ的功能
 aspectJ 框架 实现aop方式
1.xml的配置文件（做事务的时候常用xml 使用AOP）配置全局事务
2.使用注解   一般使用注解

AOP的概念：
1.aspect ：切面 表示给业务方法增加功能
2.pointcut ：切入点，一个或者多个 JoninPoint的集合 表示切面功能执行的位置
3.advice：通知 表示切面执行的时间

六. aspectJ 框架的使用。
   1）切面的执行时间，这个执行时间 在规范中 叫做Advice（通知，增强）
	在aspectJ框架中 使用注解来表示
		表示目标方法的执行时间
      1.1）@Before
      1.2）@AfterReturninh
      1.3）@Around
      1.4）@AfterThrowing
      1.5）@After
   2）切入点 表达式（表示 切面执行的位置）  让Spring 找到切入点
		executin( modifiers-pattern ?  ret-type-pattern
			declaring -type-pattern ? name-pattern(param-pattern)
			throws-pattern ? )
		madifiers-pattern :访问权限类型
		ret-type-pattern 返回值类型
		declaring-type-pattern? 包名类名
		name-pattern(param-pattern) 方法名 以及参数
		throws-pattern 抛出异常类型
		？表示可选的部分 可以没有

使用aspectj实现AOP的步骤：
1.新建maven项目 
2.加入需要的依赖   如：加入 spring依赖   aspectj依赖  junit单元测试依赖
3. 创建目标类： 接口和他的实现类。   母的是给 类的方法增加功能

4. 创建 切面类  ：普通类
	1）在类的上面加入 @Aspect
	2）在类中定义方法 方法就是 切面执行的功能代码
	     在方法上面加入aspectj中的通知注解，例如@Before
	     有需要指定切入点表达式 execution（）
5.创建spring的配置文件，声明对象，吧对象交给容器统一使用
  声明对象你可以使用注解或者xml配置文件<bean>
 5.1)声明目标对象
 5.2）声明切面类对象
 5.3）声明aspectj框架中的自动代理生成器标签。
         自动代理生成器：用来完成代理对象的自动创建功能

6.创建测试类，从spring容器中获取目标对象（实际上就是代理对象）
	通过代理执行方法，实现AOP的功能增强。

当 execution 中的参数错误  会使AOP切面寻找不到 加入不了方法内  

什么时候 需要考虑使用AOP技术
1.给多个类增加一个相同的功能
2.给系统存在的类修改功能。但原有功能不完善

在声明的切面的切面方法之中 是公共的 没有返回值的 可以有参 可以无参 方法名自定义
	如果有参数  参数只有几个唯一的类型可以选择
参数：
1.joinpoint ：业务方法 ，要加入切面功能的业务方法    获取方法的参数 	

	在声明的切面的切面方法之中 是公共的 没有返回值的 可以有参 可以无参 方法名自定义
	如果有参数  参数只有几个唯一的类型可以选择

	  作用是：在通知方法中获取方法执行信息，如方法名称 和实参
	   如果切面功能需要用到方法信息 就加入Joinpoint
	   Joinpoint 参数的值是由框架富裕的 必须是第一个位置的参数

在 业务方法 形参中 声明 JoinPoint jp 之后
 jp.getSignature 获取方法的签名  （根目录到 方法名）
 jp.getSignature().getName()  获取方法的名称
 object args []=jp.getArgs();
args 内就是方法的参数

2.AfterReturning :  例: @AfterReturning( value ="execution(*  *..类名.方法名(..))",
				returning = "res"   //这里的res 与切面方法声明的 参数名一致)
	         后置通知  要求  公共方法 public  方法没有返回值  方法名称自定义  方法有参数 推荐是objct 参数名自定义
	          1.value ： 切入点表达式
	          2.returning  自定义的变量，表示目标方法的返回值。
		自定义变量名必须和通知方法的形参名一样
特点：
1.在目标方法之后执行的
2.能够获取到目标方法的返回值，可以根据返回值做不同的处理 
3.可以修改返回值

3.Around 环绕通知 定义格式    @Around（value =" execution()"）
	1.public  2.必须有一个返回值 推荐 object  3.方法名自定义   4.方法有参数
注解： @Around:
	属性：value 
	位置：在方法的定义什么
    特点
	1.功能最强的通知
	2.在方法前后 都能增强功能
	3.控制目标方法是否被调用执行
	4.修改原来的目标方法的执行结果 影响最后的调用结果
   环绕通知， 等同于jdk的动态代理 。影响最后的调用结果  等同于 InvocationHandler接口    
   
   参数：ProceedingJoinPoint  等同于 Method invode
		作用：执行目标方法
   返回值： 就是目标方法的执行结果，可以被修改。
   ProceedingJoinPoint pjp   //    pjp.proceed();   等价于Method.invoke();
  //目标方法的前  后 加功能    类似于jdk的动态代理 写代码就行

  环绕通知：将目标方法的执行过程放到@Around 声明的方法之中  就是方法是Around 声明后的方法一起执行
	声明了Around方法的  函数  将在函数内部 完成对目标方法  execution指向的方法 的实现

4.异常通知：
	1. public   2.没有返回值  3. 方法名自定义   4.方法自带Exception参数 如果有就是JoinPonint
	
	@AfterThrowing :异常通知 
		属性：1.value 切入点表达式
		          2. throwing  自定义的变量，表示目标方法抛出的异常对象。  变量名必须和方法的参数名一样
	特点：
	1.在目标方法抛出异常时执行的
	2.可以做异常的监控陈序， 监控目标方法执行时是不是有异常。
	   如果有异常，可以发送 邮箱，或短信
 	执行过程就是：
	try{
	    //业务方法
	}catch(Exception e){
		myAfterThrowing    		//所声明的异常通知处理方法
		}

5.最终通知：
	1. public   2.没有返回值  3. 方法名自定义   4.方法自带Exception参数 如果有就是JoinPonint
	
	@After：最终通知 
	      属性： value   切入点表达式
	      位置： 在方法的上面
	特点：
	1.总是会执行
	2.在目标方法之后执行的

	一般是用于资源清除工作  	就算是 代码报错 也会执行	
类似于：  try{
	    //业务方法
	}catch(Exception e){
		myAfterThrowing    		//所声明的异常通知处理方法
	}fiannly{
	//最终通知		总是会被执行
	}

6.@Pointcut
如果在一个切面类中 包含了 很多个指向同一个切点 方法 的 话   就可以使用@Pointcut   来一起定义切入点
	属性：
	       value： 切入点表达式
	位置：在自定义的方法上面
	
	特点：
	  当使用@Pointcut定义在一个方法的上面，这个方法的名称就是切入点表达式的别名
	  其他的通知中，value属性就可以使用这个方法名称 ，代表切入点表达式
	
	上面有了Ponintcut  就代表 这个方法 指向了 excution 切入点表达式里面的方法



目标类没有接口 就是是使用cglib动态代理 spring 框架会自动使用
如果有接口 那么就是 使用jdk动态代理

如果想要 有接口的类 同时使用cglib代理的话   就在配置文件中加入proxy-target-class="true"  这样就是告诉spring使用cglib代理
则 <aop:aspectj-autoproxy proxy-target-class="true">

	!!!!!------------------------!!!! Spring整合mybatis!!! --------------------------------------!!!

使用IOC  （创建对象）：（把mybatis框架中的对象 交给 spring 统一创建）
	让IOC创建对象   将mybatis中的对象交给spring统一创建 ，开发人员从spring中获取对象
	
	在做大型文件时   会使用独立的 连接池类  替换mybatis 自带的    
1.把连接池类 也交给 spring 来创建		使用 druid连接池
2.SqlSessionFactory对象
3.创建出dao对象

需要学习的就是 上面三个对象的创建语法：使用xml的bean标签
	步骤：
	1.新建maven项目
	2.加入maven依赖
		1) spring依赖
		2)mybatis依赖
		3）mysql驱动
		4）spring的事务依赖
		5）mybatis和spring集成的依赖：mybatis 官方用的  	 用来在spring项目中创建mybatis的SqlSesissionFactory，dao对象
	3，创建实体类
	4,。创建dao接口和mapper文件
	5.创建mybatis主配置文件
	6.创建Service接口和实现类，属性是dao
	7.创建spring的配置文件：声明mybatis的对象 交给spring创建		
		1）数据源
		2）SqlSessionFactory
		3）Dao对象
		4）声明自定义的service
	8.创建测试类，获取Service对象，通过service调用dao完成数据库的访问
 
Spring 的事务处理
	1. 什么是事务
		在mysql的时候 ，提出事务。事务 是指一组sql语句的集合 ，集合中 有 多条sql语句
	我们希望sql语句成功  或者都失败  ，	这些 sql语句的执行 是一致的 作为一个整体执行。

	2.在什么时候想到使用事务
		当操作 涉及到多个表  或 多个sql语句的 执行 时  需要保证 语句 成功才能完成 功能  ，或者 都失败保证操作是符合要求的 
	就使用事务
	
	在java代码中 写程序，控制事务，此时 事务放在哪里呢？	
	service类的业务方法上，因为业务方法会调用多个dao方法，执行多个sql语句

	3.通常使用JDBC访问数据库，还是mybatis访问数据库怎么处理事务
		jdbc访问数据库  处理事务    Connection conn ; conn.commit();  conn.rollback();
		mybatis 访问数据库 处理事务 SqlSession.commit ;  SqlSession.rollback();			
	4. 3中 问题中事务的处理方式 ，有什么不足
		1) 不同的数据库访问技术，处理事务的对象，方法不同，
			需要了解不同数据库访问技术使用事务的原理
		2）掌握多种数据库中 事务的处理逻辑。 什么时候提交事务 ， 什么时候回滚事务
		3）处理事务的多种方法。

		即：多种数据库的访问技术，有不同的事务处理的机制，对象，方法。
		  
	5.怎么解决不足
	   spring提供一种处理事务的统一模型，能使用统一的步骤，方式 完成多种不同数据库访问技术的事务处理。
	       使用spring的事务处理机制，可以完成    各种数据库（mybatis 。jdbc, hibernate）	访问数据库的事务处理。
		即 spring的事务处理机制 包含了 各种技术 访问数据库处理事务 
			将事务相关的资源和 内容提供给spring  spring会自动处理提交...等
	6.处理事务，需要怎么做，做什么
	  spring 处理事务的模型，和步骤都是固定的。把事务使用的信息提供给 spring
		1)spring中 有 事务管理器  会 完成等   提交和回滚事务
			事务管理器： （ 接口(PlatformTransactionManager) 和  实现类）
				实现类：spring将 数据库访问技术 对应的事务处理类 创建完成
					例：mybatis 访问数据库  --spring创建好的是DataSourceTransactionManager
	使用方法：  
		一。告诉spring 用的是哪个数据库访问技术    声明数据库访问技术对于的 事务管理器实现类  在 spring的配置文件中用bean声明
			例如 声明mybatis <bean id=""  class="...DataSourceTransactionManager">

		二。业务方法需要的事务 。说明事务的类型。
		     说明方法需要的事务：
			1）事务的隔离级别：有4个值	都是以  ISOLATION_开头
				Mysql ：默认REPEATABLE_READ;   Oracle:READ_COMMITTED
			READ_UNCOMMITTED:读未提交    不解决任何并发问题
			READ_COMMITTED 读已提交。解决脏读 存在不可重复读和幻读
			REPEATABLE_READ: 可重复读. 解决脏读  不可重复读  存在幻读
			SERIALIZABLE: 串行化 。不存在并发问题	
			2) 事务的超时时间：  表示一个方法最长的执行时间，如果方法执行时超过了事务的执行时间 事务就回滚 （单位：秒）
				默认值为-1
			3）事务的传播行为：控制 业务方法是不是有事务 ，是什么样的事务
				七个传播行为，表示你的业务方法调用时 ，事务在方法之间是如何使用的
					重点：
					       PROPAGATION_REQUIRED		:  方法必须有事务    有事务加入到已有事务中
						存在事务 就用事务 		不存在事务 则创建事务
					       PROPAGATION_REQUIRES_NEW	：每次都是新建的事务  如存在事务则将事务挂起
						新建事务
					       PROPAGATION_SUPPORTS	：可以有事务 也可以没有事务
			4)  spring  提交事务 和 回滚事务的时机
				1）当业务方法 执行成功 没有异常抛出 则 方法执行完毕  spring 在方法执行后提交事务
				2）当业务方法 抛出异常或ERROR  	spring执行回滚 调用事务管理器的rollback
					运行时异常定义： RuntimeException    及子类   NullPoint   NumberFormat
				3）当业务方法 抛出非运行时异常  ，主要是 受查异常   提交事务
				受查异常：   写代码时  处理的异常： 例如IOException  	SqlException
	
		即：1）管理事务的是 事务管理区 即实现类
		2）spring的事务是一个统一模型
			2。1）指定要使用的事务管理器实现类  使用 <bean>、
			2.2）指定哪些类，哪些方法需要加入事务的功能
			2.3）指定方法需要的隔离级别 传播行为  超时


	Spring 框架中 提供的事务处理方案
		1.适合中小项目使用的 ，注解方案。
			spring框架自己用aop实现给业务方法增加事务的功能，使用@Transactional 注解增加事务，
			@Transaction注解 是spring框架自己注解  放在public 方法的上面  表示 该方法 有事务
			可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等
				可选择的 属性：（propagation  isolation readOnly timeout rollbackFor rollbackForClassName）
				propagation ：事务传播属性
				isolation ：事务隔离级别
				readOnly： 用于设置方法是否是只读
				timeout： 设置超时实现
				rollbackFor： 指定需要回滚的异常类
				rollbackForClassName：指定需要回滚的异常类 类名
			  1.需要声明事务管理区 对象 
				<bean id =“” class=“DataSourceTransactionManager”>
			  2. 开启事务注解驱动，告诉spring框架，我要使用的注解的方式管理事务
				spring 给aop机制 创建@Transactional所在类代理对象，给方法加入事务的功能
			  spring 给业务加入事务：在业务方法执行前 开启事务，执行后 提交或回滚  使用AOP的环绕通知
				@Around（）
				objec   myAround 方法{
					开启事务，spring自动开启
					try{
						buy（）方法
						事务管理器。commit
					}catch{
						事务管理器。rollback（）
					}
				}
			3.在方法上面加入注解