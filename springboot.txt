	gitignor  项目中 被忽略的 以及 重要的后缀

pom中  的代码：
	modelversion  -maven 版本

	org.springframework- 指定   spring- boot staatter-parent 
			spring boot工程的父工程的 起步依赖  起步工程	版本号即是父工程版本号maven的多维化？

	 /*spring-boot项目 启动入口类*/
	    public static void main(String[] args) {

	        SpringApplication.run(CmSpringbootFirstApplication.class, args);
	
	    }

	/*spring boot 核心注解  主要开启 spring 自动配置的注解*/
	@SpringBootApplication

	在 resources 中：
		static 存放的是 ：静态的 web资源  如 图片 cs  图标
		 templates：存放的是 模板   模板是前段模板：如Thymeleaf
		application.properties：spring_boot的核心配置文件

	自动集成完毕springMVC

	springboot   的项目代码 在 SpringBoot 项目入口main 的 同级或者下级目录

在springboot的核心配置文件 application.properties 中
	设置内嵌Tomcat端口号
	 server.port="设置的端口号名"

	设置上下文根：
	server.servlet.context-path="设置的上下文根"		等等

使用springboot框架的核心配置文件application.yml或者apolication.yaml	application.properties格式一样 就是后缀名不一 

	在yml中：按照代码的 路径  以python类似的 制表符来控制一串代码  成为金字塔行  来控制 代码 
		核心配置文件的 代码格式 不一样

	如果同时使用application.yml 和 applicatio.properties 的话 那么 以properties为准

多环境下 核心配置文件（properties）的使用， 工作中开发环境等等 的不同 	如何让多种环境下 同时可以让代码实现 
	分别创建好 各种环境对于的 配置文件 命名为：application-xx-properties	
	后在 springboot主配置文件中
					spring.profiles.active = xx
	想切换 环境 只需要 改 对于环境的 properties 前面的xx  
	给 springboot 主配置文件中的spring.profiles.avtive 赋值就行


多环境下 核心配置文件 (yml )	的使用，   同理

springboot在 核心配置文件application,properties自定义配置：

	在代码中能够获取 application.properties 中定义的值
		使用Value ( $ { } ): 来给springboot 主配置文件赋值
		
	springboot 核心配置文件 定义的对象的属性  如shcool.name  就是shcool 对象的 name属性
		springboot在核心配置文件中 将自定义配置映射到 一个 对象：
			在对象类的 上层 加上@Conponent  // 将对象类 交给spring 容器处理
				在加上      @ConfigurationProperties (profix =  "shcool "  // 配置文件中定义的对象的名称)
	
					再用@Autowired	 注入到其他类中  
					下一行	private   声明属性   赋值给对象

spring boot 核心配置文件  有中文信息 会出现乱码的 话：
	一般不建议出现中文
	如果有 没办法省略  可以转换为ASCII 码

SpringBoot  整合mybatis
	1.添加相应的依赖
		在properties 中修改 的是父工程的 版本属性
		在 dependencies 里面 是创建自己的   版本属性

	2.使用Mybatis提供的 逆向工程生成实体bean ，映射文件  ，Dao接口
		PowerDesigner  可以形象的 在图形化界面创建表
		//在pom.xml文件的 Build  目录下 加上mybatis 代码自动生成插件
		<plugin>
			<groypId>
   			<artifactId>mybatis-generator-maven-plugin</artifactId>
			<version>1.3.6</version>
			<configuration>
				//配置文件的位置
				<configurationFile>   对于写的 mybatis的配置文件的 文件名字</configurationFile>
				<verbose> true </verbose>
				<overwrite> true </overwrite>
			</configuration>
		</plugin>
		在  配置mybatis逆向工程对应的配置文件中：
			javaModelGenerator： 生成实体bean的 生成器   把数据库中的 表 全部 生成 为 实体bean   生成出的 包在 targetPackage
							targetProject  生成出的实体类   的存放路径   
			sqlMapGenerator：生成映射文件  
			javaClientGenerator：Dao接口生成器
			<table> 	对于的是 数据库中 指定的表   domainObjectName =对这个表起的名字
				
	在连接数据库时  如果字段名称 由多个单词构成，通过mybatis逆向工程 生成的 对象属性名称 会按照 驼峰命名法 生成
	！！！！	其中 字段名 由多个单吃构成 必须使用下划线分割  ！！！！  
	在生成属性 的时候 并不会 区分 给的参数的大小写   	username  == userName =USERNAME

		在mybatis 逆向工程时 ： 表的属性 如果是由多个英文单词构成 那么 英文单词之间 会有 '_'
			这样生成之后  例如：  user_name   在java文件中 就是 userName  按照驼峰命名法来生成
				而表 没有用_分割 如 userage 生成的 java文件的 对应属性就是 userage
		这样就不符合自然的 驼峰命名法的规则
			即在数据库 字段 命名时   多个单词构成的时候 必须使用  _  分割	
	在mybatis 逆向工程之中  使用封装类型  就避免了 "" 这种的判断  自动就判断成了 null  所以只需要考虑  不为null即可

	在Dao接口上需要增加@Mapper   要不然 业务层访问不到

	继承mybatis  最主要的就是 @Mapper  @MapperScan 
		@Mapper  需要在每一个Mapper 接口类上添加 作用是 扫描dao接口		Dao接口上面加   让启动类可以扫描到 接口内方法
		@MapperScan 需要在SpringBoot启动入口类上添加 它扫描所有的包	在 启动类上面添加 扫描包  扫描同级以及下级
	关于 Mapper 映射文件的 存放的 位置 有  ： 
	1. 将Mapper接口和 映射文件 存放到 一个 目录下 ，在 pom指定 资源文件夹的 路径 resources

	2.将Mapper 接口和 Mapper 映射文件分开放 
		Mapper接口类存放到 src/main/java 目录下
		Mapper 映射文件 存放到 resources 类路径下
		在springboot 核心配置文件指定 mapper映射文件存放的位置

	集成玩 mybatis 后   springboot项目下使用事务
		事务是一个完整的功能   也是一个完整的业务
			PS  :  数据库的 SQL语句 有 DML数据操纵语句  DQL数据查询语句  DDL数据定义语句  TCL事务控制语句  DCL数据控制语句  
		事务只和   DML 语句有关   只和 增删改 有关 

		在定义的 Service 层 方法上面 加上 @Transactional  可以让改方法加入事务	
	@EnableTransactionManagement  开启事务注解


	springboot   集成 springMVC
		  在控制层 的类上面  写 @Contorller  代表是控制层    所指的方法 需要加上  @ResponseBody 
		  在 控制层的 类上面 写 @RestController  相当于  上面的 @Contorller   和每个方法都加上了@ResponseBody 
			意味着  当前控制层 的所有方法 返还的都是JSON对象 
				JSON对象  ：一种轻量级的 数据交换格式	数据以键 值对的形式保存  

		@RequestMapping   注解在某个方法 上面时  默认是 请求方式 是 支持 GET 和 POST 请求的
			如果只能用 GET 或者 POST  则 在 @RequestMapping中（value=“” ，method =RequestMethod.GET  或者  RequestMethod.POST）
			使用   (Postman  )	来测试接口是post  还是 get  通过浏览器的数据都默认是get
		只 支持 GET方法  相当于  @GetMapping ( value  =  " ")	//该注解通常在 查询数据的时候使用
			如果请求方式不对 会报405错误 
		同理 只支持POST    除了用 @RequestMapping   还能用   @PostMapping (value = “ ”)
			// 该注解 通常在 新增数据的时候使用  
		@DeleteMapping （value = “”）	// 做删除操作
		@PutMapping （value = " " ）	//加入操作
	SpringBoot 集成RESTful
		RESTful： 提出一组客户端和服务器交互的 架构理念   使设计的接口 更简洁 更加有层次
			例如： http://localhos;8080/boot/order?id=1021&status=1
				使用RESTFul  风格后 则 地址为  http://localhos;8080/boot/order/1021/1
		SpringBoot 开发 RESTFul  主要是通过 注解实现
			1. @PathVariable   获取 url中的数据     （最主要的注解）
			2. @PostMapping  等等 上面的 Mapping 注解
			使用： @RequestMapping （value =“/student/detail/{id}/{age}}”）
			将请求参数  放到请求路径里面去了
				然后在方法中   例如 ： public object student1 （@PathVariable（“id”）Integer id
								        @PathVariable （“age”）Integer age）
				在方法体中：            {	Map<String,Object> retMap =new HashMap<>();
							retMap.put("id",id)
							retMap.put("age",age)
						return retMap; 	通过 PathVariable 中的 注解 来获取 请求路径里面的值}
	ctrl +shift +Y 使用翻译	在类中  如果有多个 相同的  public object student1 （@PathVariable（“id”）Integer id
								        @PathVariable （“age”）Integer age）
						参数类型
					就可以通过 @PutMapping  等来区分 方法的 类型		
					或者修改请求路径
					RESUful  请求风格要求路径中 最好都是名词  不可以出现动词

	 17.springMvc中  常见的其他注解  
	 18。springboot使用 RESTful风格
	 19. springboot集成Redis 
		1.添加操作 redis 数据类型的依赖
		2.在springboot核心配置文件中添加redis的配置
			在 spring boot主配置文件中   application.properties 配置 redis配置文件
				spring.redis.host =192.168.154.128
				spring.redis.post =6379
				spring.redis.password=123456
			